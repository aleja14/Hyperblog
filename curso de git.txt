Git es un sistema de control de versiones distribuido, 
diseñado por Linus Torvalds. 
Está pensando en la eficiencia y la confiabilidad del
 mantenimiento de versiones de aplicaciones cuando estas 
tienen un gran número de archivos de código fuente. 
Git está optimizado para guardar todos estos cambios de forma atómica e
incremental.

¿Qué es un sistema de control de versiones?
El SCV o VCS (por sus siglas en inglés) es un sistema que registra los 
cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo,
 de modo que puedas llevar el historial del ciclo de vida de un proyecto, 
comparar cambios a lo largo del tiempo, ver quién los realizó o revertir 
el proyecto entero a un estado anterior.

¿Qué es Github?
Es una plataforma de desarrollo colaborativo para 
alojar proyectos utilizando el sistema de control de versiones Git. 
Se emplea principalmente para la creación de código fuente de programas
 de computadora.

Cómo actualizar Git en Mac ---brew upgrade git
git --version
git version 1.9.3 (Apple Git-50)

linux git 
sudo apt-get update
sudo apt install git
git --version
sudo apt-get install git

Conceptos importantes de Git
Bug: Error en el código

Repository: Donde se almacena todo el proyecto, el cual puede vivir tanto en local como en remoto. El repositorio guarda un historial de versiones y, más importante, de la relación de cada versión con la anterior para que pueda hacerse el árbol de versiones con las diferentes ramas.

Fork: Si en algún momento queremos contribuir al proyecto de otra persona, o si queremos utilizar el proyecto de otro como el punto de partida del nuestro. Esto se conoce como “fork”.

Clone: Una vez se decide hacer un fork , hasta ese momento sólo existe en GitHub. Para poder trabajar en el proyecto, toca clonar el repositorio elegido al computador personal.

Branch: Es una bifurcación del proyecto que se está realizando para anexar una nueva funcionalidad o corregir un bug.

Master: Rama donde se almacena la última versión estable del proyecto que se está realizando. La rama master es la que está en producción en cada momento (o casi) y debería estar libre de bugs. Así, si esta rama está en producción, sirve como referente para hacer nuevas funcionalidades y/o arreglar bugs de última hora.

Commit: consiste en subir cosas a la versión local del repositorio. De esta manera se puede trabajar en la rama de forma local sin tener que modificar ninguna versión en remoto ni tener que tener la última versión remota, cosa muy útil en grandes desarrollos trabajados por varias personas.

Push: Consiste en enviar todo lo que se ha confirmado con un commit al repositorio remoto. Aquí es donde se une nuestro trabajo con el de los demás.

Checkout: Acción de descargarse una rama del repositorio GIT local (sí, GIT tiene su propio repositorio en local para poder ir haciendo commits) o remoto.

Fetch: Actualiza el repositorio local bajando datos del repositorio remoto al repositorio local sin actualizarlo, es decir, se guarda una copia del repositorio remoto en el local.

Merge: La acción de merge es la continuación natural del fetch. El merge permite unir la copia del repositorio remoto con tu repositorio local, mezclando los diferentes códigos.

Pull: Consiste en la unión del fetch y del merge, esto es, recoge la información del repositorio remoto y luego mezcla el trabajo en local con esta.

Diff: Se utiliza para mostrar los cambios entre dos versiones del mismo archivo.

ls -al archivos ocultos listados
control l  --- limpiar consola
ls -a archivos todos ocultos o no no listados

rm --- borrar

Comandos para iniciar tu repositorio con Git
git init: para inicializar el repositorio git y el staged
git add nombre_del_archivo.txt: enviar el archivo al staged
git status: ver el estado, si se requiere agregar al starget o si se requiere commit
git conf: para ver las posibles configuraciones
git conf --list: para ver la lista de configuraciones hechas
git conf --list --show-origin: para mostrar las configuraciones y sus rutas
git rm --cached nombre_del_archivo.txt: para eliminar el archivo del staged(ram)
git rm nombre_del_archivo.txt: para eliminar del repositorio

git rm --cached : queda en memoria ram

git config --list --show-origin

cambios de archivo con log
git log nombredearchivo.txt

salir del editor de texto de git bash
esc shift zz y guarda

git diff codigo de versión 622504fa5bf1d98ff23dcfc70f90152c3358f19a

crear carpeta y luego git init
crear archivo.txt
 git --global user.name "Aleja"
git --global user.email "correo"
git add . o nombre txt
git commit "algo"
git status
git log nombre de txt
git diff ver cambios 

Git reset y git rm son comandos con utilidades muy diferentes, 
pero se pueden confundir muy fácilmente.

git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar 
su historial del sistema de versiones. 
Esto quiere decir que si necesitamos recuperar el archivo solo debemos
 “viajar en el tiempo” y recuperar el último commit 
antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. 
Debemos usar uno de los flags para indicarle a Git cómo 
eliminar los archivos que ya no necesitamos en la última versión del proyecto:

git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git reset
Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos emplearlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de utilizar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
¡Pero todavía falta algo!

git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
¿Por qué esto es importante?
Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualización. Todos los archivos con cambios se mueven al área de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no está listo todavía. Actualizaste el archivo, pero ese cambio no debe ir en el próximo commit por ahora.

¿Qué podemos hacer?

Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no están listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.

¡Al usar git rm lo que haremos será eliminar este archivo completamente de git! Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su última actualización. Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo después, no en este commit.

En cambio, si usamos git reset HEAD, lo único que haremos será mover estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo (no con sus últimos cambios, pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.

Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.



omandos para trabajo remoto con GIT
git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Básicamente, git fetch y git merge al mismo tiempo.
Adicionalmente, tenemos otros comandos que nos sirven para trabajar en proyectos muy grandes:

git log --oneline:Te muestra el id commit y el título del commit.
git log --decorate: Te muestra donde se encuentra el head point en el log.
git log --stat: Explica el número de líneas que se cambiaron brevemente.
git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.
git log -3: Limitamos el número de commits.
git log --after=“2018-1-2”
git log --after=“today” y
git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.
git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html: Busca los commits en un archivo en específico.
git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.
git log > log.txt: guardar los logs en un archivo txt

Comandos básicos de GitHub
git init: crear un repositorio.
git add: agregar un archivo a staging.
git commit -m “mensaje”: guardar el archivo en git con un mensaje.
git branch: crear una nueva rama.
git checkout: moverse entre ramas.
git push: mandar cambios a un servidor remoto.
git fetch: traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local.
git merge: tiene dos usos. Uno es la fusión de ramas, funcionando como un commit en la rama actual, trayendo la rama indicada. Su otro uso es guardar los cambios de un servidor remoto en nuestro directorio.
git pull: fetch y merge al mismo tiempo.
Comandos para corrección en GitHub
git checkout “codigo de version” “nombre del archivo”: volver a la última versión de la que se ha hecho commit.
git reset: vuelve al pasado sin posibilidad de volver al futuro, se debe usar con especificaciones.
git reset --soft: vuelve a la versión en el repositorio, pero guarda los cambios en staging. Así, podemos aplicar actualizaciones a un nuevo commit.
git reset --hard: todo vuelve a su versión anterior
git reset HEAD: saca los cambios de staging, pero no los borra. Es lo opuesto a git add.
git rm: elimina los archivos, pero no su historial. Si queremos recuperar algo, solo hay que regresar. se utiliza así:
git rm --cached elimina los archivos en staging pero los mantiene en el disco duro.
git rm --force elimina los archivos de git y del disco duro.
Comandos para revisión y comparación en GitHub
git status: estado de archivos en el repositorio.
git log: historia entera del archivo.
git log --stat: cambios específicos en el archivo a partir de un commit.
git show: cambios históricos y específicos hechos en un archivo.
git diff “codigo de version 1” “codigo de version 2”: comparar cambios entre versiones.
git diff: comparar directorio con staging.

ssh-keygen -t rsa -b 4096 -C "a12leja@hotmail.com"
ssh-add ~/.ssh/id_rsa

git pull origin master ---- traerse cambios de github
git push origin master ---- mandar cambios a master
git add . ---adicionar todo
git commit -am "colocar mensaje"
git merge nombre de rama que se quiere juntar
git log --all --graph --decorate --oneline ----ver cambios de manera grafica entre ramas
alias arbolito="git log --all --graph --decorate --oneline"  colocar alias a los comandos
$ git tag -a v0.1 -m "Resultados primer clase" 25fdc5d   agregar un tag

Comandos para trabajar con etiquetas:
Crear un nuevo tag y asignarlo a un commit: git tag -a nombre-del-tag id-del-commit.
Borrar un tag en el repositorio local: git tag -d nombre-del-tag.
Listar los tags de nuestro repositorio local: git tag o git show-ref --tags.
Publicar un tag en el repositorio remoto: git push origin --tags.
Borrar un tag del repositorio remoto: git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag.
git show-ref --tags
git push origin :refs/tags/dormido   --- borrar tag


buena practica:
git pull origin master
git commit -am "algo"
git push origin master
git show-branch --- ver historia de ramas
git show-branch --all   ----mas detalle de las ramas
gitk -----ver historia de cambios por interfaz
Pull request:
Es una funcionalidad de github (en gitlab llamada merge request y en bitbucket push request), en la que un colaborador pide que revisen sus cambios antes de hacer merge a una rama, normalmente master.

Al hacer un pull request se genera una conversación que pueden seguir los demás usuarios del repositorio, así como autorizar y rechazar los cambios.

El flujo del pull request es el siguiente

Se trabaja en una rama paralela los cambios que se desean (git checkout -b <rama>)
Se hace un commit a la rama (git commit -am '<Comentario>')
Se suben al remoto los cambios (git push origin <rama>)
En GitHub se hace el pull request comparando la rama master con la rama del fix.
Uno, o varios colaboradores revisan que el código sea correcto y dan feedback (en el chat del pull request)
El colaborador hace los cambios que desea en la rama y lo vuelve a subir al remoto (automáticamente jala la historia de los cambios que se hagan en la rama, en remoto)
Se aceptan los cambios en GitHub
Se hace merge a master desde GitHub
Importante: Cuando se modifica una rama, también se modifica el pull request.


Forks o Bifurcaciones
Es una característica única de GitHub en la que se crea una copia exacta del estado actual de un repositorio directamente en GitHub, éste repositorio podrá servir como otro origen y se podrá clonar (como cualquier otro repositorio), en pocas palabras, lo podremos utilizar como un git cualquiera
.
Un fork es como una bifurcación del repositorio completo, tiene una historia en común, pero de repente se bifurca y pueden variar los cambios, ya que ambos proyectos podrán ser modificados en paralelo y para estar al día un colaborador tendrá que estar actualizando su fork con la información del original.
.
Al hacer un fork de un poryecto en GitHub, te conviertes en dueñ@ del repositorio fork, puedes trabajar en éste con todos los permisos, pero es un repositorio completamente diferente que el original, teniendo alguna historia en común.
.
Los forks son importantes porque es la manera en la que funciona el open source, ya que, una persona puede no ser colaborador de un proyecto, pero puede contribuír al mismo, haciendo mejor software que pueda ser utilizado por cualquiera.
.
Al hacer un fork, GitHub sabe que se hizo el fork del proyecto, por lo que se le permite al colaborador hacer pull request desde su repositorio propio.

Trabajando con más de 1 repositorio remoto
Cuando trabajas en un proyecto que existe en diferentes repositorios remotos (normalmente a causa de un fork) es muy probable que desees poder trabajar con ambos repositorios, para ésto puedes crear un remoto adicional desde consola.

git remote add <nombre_del_remoto> <url_del_remoto> 
git remote upstream https://github.com/freddier/hyperblog
Al crear un remoto adicional podremos, hacer pull desde el nuevo origen (en caso de tener permisos podremos hacer fetch y push)

git pull <remoto> <rama>
git pull upstream master
Éste pull nos traerá los cambios del remoto, por lo que se estará al día en el proyecto, el flujo de trabajo cambia, en adelante se estará trabajando haciendo pull desde el upstream y push al origin para pasar a hacer pull request.

git pull upstream master
git push origin master

asos para hacer deployment en un servidor web:
Entrar a la capeta de los archivos del servidor.
Copiar link en clone, elegir entre HTTPS o SSH del repositorio a contribuir.
-En la carpeta deseada se clona el repositorio:
git clone url
Deploy:
Realizar cambios y commit en GitHub.
Traer al Repositorio local las actualizacion para el servidor en la capeta de los archivos del servidor.
git pull ramaRemota main
Nota: Siempre se debe proteger el archivo .git. Dependiendo del software para el servidor web, existen diferentes maneras. La conexión entre GitHub y el servidor se puede realizar mediante: Travis (pago) o Jenkis (Open source).


#HazmeUnPullRequest

hacer FORK de hyperblog
en blogpost.html
Dentro del ID “post” luego de “suscribete y dale like” agrega otra línea o párrafo con tu nombre o tu nombre de usuario en Platzi.
hacer add, commit, push
hacer un pull request



Git funciona para muchos tipos de archivo, ¿Qué tal funciona Git con archivos binarios?

Los puede agregar y versionar pero es mejor usar Git con texto plano.

2.
En un commit, los mensajes del commit son:

Importantes y obligatorios.

3.
¿Qué es un branch o una rama en Git?
Un repositorio aparte del master donde puedes trabajar en paralelo.

4.
Un repositorio remoto y un repositorio local:

Tienen ramas similares dependiendo de cuáles haya enviado entre uno y otro.

5.
¿El HEAD en una rama es?

El apuntador al estado actual del repositorio basado en la rama en la que estoy trabajando.

6.
¿Cuándo debería hacer un merge?

Cuando quiero fusionar los cambios de una rama con otra.

7.
¿GitHub es?

Un sistema online de manejo de repositorios de Git.

8.
Para transmitir cambios seguros entre tu repositorio local y GitHub, ¿qué se recomienda?

Usar una llave SSH.

9.
Se crean dos archivos cuando creas una llave pública y privada para SSH, ¿cuál es la extensión de la llave privada?

Ninguna extensión
10.
¿Qué crean los tags en Git?

Versiones descargables y puntos únicos en una rama de un repositorio.

11.
¿Puedo crear ramas en GitHub que no tenga en mi repositorio local?

Sí, tú decides si traer esas ramas a tu repositorio local.
12.
En un repositorio público en GitHub, ¿qué puede hacer los colaboradores?

Hacer cambios al repositorio, hacer push/pull, crear ramas, etc.
13.
Para que dos personas trabajen en paralelo sobre el mismo archivo se recomienda:
Una rama independiente por cada persona y sus cambios que luego con verificación se hace merge a master.

14.
Un pull request es:

Un cambio sugerido a un repositorio que el dueño del repositorio puede autorizar y hacer merge a la rama que elija.

15.
El dueño de un repositorio al ver un pull request puede:

Editarlo, aceptarlo, darle merge, comentarlo para pedir cambios.

16.
Cuando hago un fork de un proyecto en GitHub, ¿lo que logro es?

Copiar un repositorio público a mis repositorios en GitHub, con todas sus ramas e historia anterior.

17.
Si en el .gitignore agrego esto: images/*.js. ¿Cuál de los siguientes archivos sería ignorado?

images/jquery.js
18.
Cuando usas git stash, los cambios que “guardas” temporalmente se guardan en:

Memoria temporal, volviendo al estado del último commit.

19.
¿Con amend puedo?

Corregir los mensajes de un commit que hice mal sin que quede en la historia del repositorio.

20.
¿Qué puedes hacer con gitk?

Ver en una interfaz visual las ramas y el log de tu repositorio.

21.
Si usas:

git config --global alias.platzi "shortlog"

¿Cómo invocar ese comando?

git platzi
22.
¿Cómo instalas Gitk?
Podemos instalarlo desde la página de Git.
REPASAR CLASE
23.
¿Cómo llaman GitHub y GitLab a los "merges" (propuestas de cambios desde otra rama o repositorio)?
GitHub los llama Pull Request y GitLab Merge Request.

24.
¿Puedes conectar tu repositorio local con más de un repositorio remoto?
Verdadero
25.
Estás en la rama master y quieres mandar los últimos cambios que guardaste con git stash a la rama retomando-los-cambios (la rama no ha sido creada aún). ¿Cuál de las siguientes soluciones es incorrecta?

git stash apply retomando-los-cambios
26.
¿Cuál es la diferencia entre git rm y git reset HEAD?
git rm saca los archivos del repositorio y (opcionalmente) del disco duro. git reset head saca los archivos de Staging, pero no del disco duro.

27.
¿Para qué sirve git grep?

Para encontrar las veces que hemos usado una palabra en los archivos del repositorio.
28.
Por defecto, GitHub usa la rama main como la rama principal. ¿Podemos cambiar la rama principal?

Verdadero
29.
¿Para qué sirve GitHub Pages?
Es un servicio de GitHub que nos permite publicar nuestros repositorios en internet (por ejemplo, nombre.github.io o nombre.github.io/proyecto).
30.
El Jefe Freddy despidió a Anita y no piensa volver a contratarla. ¿Qué debe hacer Anita para seguir haciendo contribuciones a los proyectos públicos de Platzi?

Crear un Fork del proyecto y enviar Pull Request al proyecto original.