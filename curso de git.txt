Git es un sistema de control de versiones distribuido, 
diseñado por Linus Torvalds. 
Está pensando en la eficiencia y la confiabilidad del
 mantenimiento de versiones de aplicaciones cuando estas 
tienen un gran número de archivos de código fuente. 
Git está optimizado para guardar todos estos cambios de forma atómica e
incremental.

¿Qué es un sistema de control de versiones?
El SCV o VCS (por sus siglas en inglés) es un sistema que registra los 
cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo,
 de modo que puedas llevar el historial del ciclo de vida de un proyecto, 
comparar cambios a lo largo del tiempo, ver quién los realizó o revertir 
el proyecto entero a un estado anterior.

¿Qué es Github?
Es una plataforma de desarrollo colaborativo para 
alojar proyectos utilizando el sistema de control de versiones Git. 
Se emplea principalmente para la creación de código fuente de programas
 de computadora.

Cómo actualizar Git en Mac ---brew upgrade git
git --version
git version 1.9.3 (Apple Git-50)

linux git 
sudo apt-get update
sudo apt install git
git --version
sudo apt-get install git

Conceptos importantes de Git
Bug: Error en el código

Repository: Donde se almacena todo el proyecto, el cual puede vivir tanto en local como en remoto. El repositorio guarda un historial de versiones y, más importante, de la relación de cada versión con la anterior para que pueda hacerse el árbol de versiones con las diferentes ramas.

Fork: Si en algún momento queremos contribuir al proyecto de otra persona, o si queremos utilizar el proyecto de otro como el punto de partida del nuestro. Esto se conoce como “fork”.

Clone: Una vez se decide hacer un fork , hasta ese momento sólo existe en GitHub. Para poder trabajar en el proyecto, toca clonar el repositorio elegido al computador personal.

Branch: Es una bifurcación del proyecto que se está realizando para anexar una nueva funcionalidad o corregir un bug.

Master: Rama donde se almacena la última versión estable del proyecto que se está realizando. La rama master es la que está en producción en cada momento (o casi) y debería estar libre de bugs. Así, si esta rama está en producción, sirve como referente para hacer nuevas funcionalidades y/o arreglar bugs de última hora.

Commit: consiste en subir cosas a la versión local del repositorio. De esta manera se puede trabajar en la rama de forma local sin tener que modificar ninguna versión en remoto ni tener que tener la última versión remota, cosa muy útil en grandes desarrollos trabajados por varias personas.

Push: Consiste en enviar todo lo que se ha confirmado con un commit al repositorio remoto. Aquí es donde se une nuestro trabajo con el de los demás.

Checkout: Acción de descargarse una rama del repositorio GIT local (sí, GIT tiene su propio repositorio en local para poder ir haciendo commits) o remoto.

Fetch: Actualiza el repositorio local bajando datos del repositorio remoto al repositorio local sin actualizarlo, es decir, se guarda una copia del repositorio remoto en el local.

Merge: La acción de merge es la continuación natural del fetch. El merge permite unir la copia del repositorio remoto con tu repositorio local, mezclando los diferentes códigos.

Pull: Consiste en la unión del fetch y del merge, esto es, recoge la información del repositorio remoto y luego mezcla el trabajo en local con esta.

Diff: Se utiliza para mostrar los cambios entre dos versiones del mismo archivo.

ls -al archivos ocultos listados
control l  --- limpiar consola
ls -a archivos todos ocultos o no no listados

rm --- borrar

Comandos para iniciar tu repositorio con Git
git init: para inicializar el repositorio git y el staged
git add nombre_del_archivo.txt: enviar el archivo al staged
git status: ver el estado, si se requiere agregar al starget o si se requiere commit
git conf: para ver las posibles configuraciones
git conf --list: para ver la lista de configuraciones hechas
git conf --list --show-origin: para mostrar las configuraciones y sus rutas
git rm --cached nombre_del_archivo.txt: para eliminar el archivo del staged(ram)
git rm nombre_del_archivo.txt: para eliminar del repositorio

git rm --cached : queda en memoria ram

git config --list --show-origin

cambios de archivo con log
git log nombredearchivo.txt

salir del editor de texto de git bash
esc shift zz y guarda

git diff codigo de versión 622504fa5bf1d98ff23dcfc70f90152c3358f19a

crear carpeta y luego git init
crear archivo.txt
 git --global user.name "Aleja"
git --global user.email "correo"
git add . o nombre txt
git commit "algo"
git status
git log nombre de txt
git diff ver cambios 
